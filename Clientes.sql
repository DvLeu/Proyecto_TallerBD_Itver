DELIMITER //

CREATE PROCEDURE InsertCliente(
    IN CL_NUMERO DOUBLE,
    IN CL_TERR SMALLINT,
    IN CL_NOM CHAR(200),
    IN CL_CONT CHAR(200),
    IN CL_DIREC CHAR(100),
    IN CL_CIUD CHAR(50),
    IN CL_COLONIA CHAR(100),
    IN CL_CP FLOAT,
    IN CL_LADA FLOAT,
    IN CL_TELEF CHAR(50),
    IN CL_DSCTO FLOAT,
    IN CL_DPAGO SMALLINT,
    IN CL_DCRED SMALLINT,
    IN CL_FPAGO DATETIME,
    IN CL_FULTR DATETIME,
    IN CL_CRED FLOAT,
    IN CL_SALDO FLOAT,
    IN CL_RFC CHAR(13),
    IN CL_CURP CHAR(18),
    IN CL_GIRO CHAR(100),
    IN CL_CUOTA FLOAT,
    IN CL_LOCALIDAD SMALLINT,
    IN CL_FISM SMALLINT,
    IN CL_FAFM SMALLINT,
    IN CL_MUNICIPIO CHAR(100),
    IN CL_ESTADO CHAR(100),
    IN CL_LOCALIDAD_FACT CHAR(100),
    IN CL_NUM_INT CHAR(15),
    IN CL_NUM_EXT CHAR(15),
    IN CL_MAIL CHAR(100),
    IN C_CTA SMALLINT,
    IN C_SCTA1 INT,
    IN C_SCTA2 INT,
    IN C_SCTA3 DOUBLE,
    IN C_SCTA4 INT,
    IN CL_CONTACTO CHAR(50),
    IN CL_BANCO CHAR(50),
    IN CL_CTA_BANCO CHAR(20),
    IN CL_CLABE_BANCO CHAR(20),
    IN CL_FECHA_BAJA DATETIME)
BEGIN
    -- Validación de la clave primaria: no debe ser vacía ni nula
    IF CL_NUMERO IS NULL THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Error: CL_NUMERO no puede estar vacío.';
    END IF;

    -- Inserción de los datos
    INSERT INTO clientes (CL_NUMERO, CL_TERR, CL_NOM, CL_CONT, CL_DIREC, CL_CIUD, CL_COLONIA, CL_CP, CL_LADA, CL_TELEF, CL_DSCTO, CL_DPAGO, CL_DCRED, CL_FPAGO, CL_FULTR, CL_CRED, CL_SALDO, CL_RFC, CL_CURP, CL_GIRO, CL_CUOTA, CL_LOCALIDAD, CL_FISM, CL_FAFM, CL_MUNICIPIO, CL_ESTADO, CL_LOCALIDAD_FACT, CL_NUM_INT, CL_NUM_EXT, CL_MAIL, C_CTA, C_SCTA1, C_SCTA2, C_SCTA3, C_SCTA4, CL_CONTACTO, CL_BANCO, CL_CTA_BANCO, CL_CLABE_BANCO, CL_FECHA_BAJA)
    VALUES (CL_NUMERO, CL_TERR, CL_NOM, CL_CONT, CL_DIREC, CL_CIUD, CL_COLONIA, CL_CP, CL_LADA, CL_TELEF, CL_DSCTO, CL_DPAGO, CL_DCRED, CL_FPAGO, CL_FULTR, CL_CRED, CL_SALDO, CL_RFC, CL_CURP, CL_GIRO, CL_CUOTA, CL_LOCALIDAD, CL_FISM, CL_FAFM, CL_MUNICIPIO, CL_ESTADO, CL_LOCALIDAD_FACT, CL_NUM_INT, CL_NUM_EXT, CL_MAIL, C_CTA, C_SCTA1, C_SCTA2, C_SCTA3, C_SCTA4, CL_CONTACTO, CL_BANCO, CL_CTA_BANCO, CL_CLABE_BANCO, CL_FECHA_BAJA);
END //

DELIMITER ;


-- Actualizar cliente.
DELIMITER //

CREATE PROCEDURE UpdateCliente(
    IN CL_NUMERO DOUBLE,
    IN CL_TERR SMALLINT,
    IN CL_NOM CHAR(200),
    IN CL_CONT CHAR(200),
    IN CL_DIREC CHAR(100),
    IN CL_CIUD CHAR(50),
    IN CL_COLONIA CHAR(100),
    IN CL_CP FLOAT,
    IN CL_LADA FLOAT,
    IN CL_TELEF CHAR(50),
    IN CL_DSCTO FLOAT,
    IN CL_DPAGO SMALLINT,
    IN CL_DCRED SMALLINT,
    IN CL_FPAGO DATETIME,
    IN CL_FULTR DATETIME,
    IN CL_CRED FLOAT,
    IN CL_SALDO FLOAT,
    IN CL_RFC CHAR(13),
    IN CL_CURP CHAR(18),
    IN CL_GIRO CHAR(100),
    IN CL_CUOTA FLOAT,
    IN CL_LOCALIDAD SMALLINT,
    IN CL_FISM SMALLINT,
    IN CL_FAFM SMALLINT,
    IN CL_MUNICIPIO CHAR(100),
    IN CL_ESTADO CHAR(100),
    IN CL_LOCALIDAD_FACT CHAR(100),
    IN CL_NUM_INT CHAR(15),
    IN CL_NUM_EXT CHAR(15),
    IN CL_MAIL CHAR(100),
    IN C_CTA SMALLINT,
    IN C_SCTA1 INT,
    IN C_SCTA2 INT,
    IN C_SCTA3 DOUBLE,
    IN C_SCTA4 INT,
    IN CL_CONTACTO CHAR(50),
    IN CL_BANCO CHAR(50),
    IN CL_CTA_BANCO CHAR(20),
    IN CL_CLABE_BANCO CHAR(20),
    IN CL_FECHA_BAJA DATETIME)
BEGIN
    -- Validación de la clave primaria: no debe ser vacía ni nula
    IF CL_NUMERO IS NULL THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Error: CL_NUMERO no puede estar vacío.';
    END IF;

    -- Actualización de los datos
    UPDATE clientes
    SET CL_TERR = CL_TERR, CL_NOM = CL_NOM, CL_CONT = CL_CONT, CL_DIREC = CL_DIREC, CL_CIUD = CL_CIUD, CL_COLONIA = CL_COLONIA, CL_CP = CL_CP, CL_LADA = CL_LADA, CL_TELEF = CL_TELEF, CL_DSCTO = CL_DSCTO, CL_DPAGO = CL_DPAGO, CL_DCRED = CL_DCRED, CL_FPAGO = CL_FPAGO, CL_FULTR = CL_FULTR, CL_CRED = CL_CRED, CL_SALDO = CL_SALDO, CL_RFC = CL_RFC, CL_CURP = CL_CURP, CL_GIRO = CL_GIRO, CL_CUOTA = CL_CUOTA, CL_LOCALIDAD = CL_LOCALIDAD, CL_FISM = CL_FISM, CL_FAFM = CL_FAFM, CL_MUNICIPIO = CL_MUNICIPIO, CL_ESTADO = CL_ESTADO, CL_LOCALIDAD_FACT = CL_LOCALIDAD_FACT, CL_NUM_INT = CL_NUM_INT, CL_NUM_EXT = CL_NUM_EXT, CL_MAIL = CL_MAIL, C_CTA = C_CTA, C_SCTA1 = C_SCTA1, C_SCTA2 = C_SCTA2, C_SCTA3 = C_SCTA3, C_SCTA4 = C_SCTA4, CL_CONTACTO = CL_CONTACTO, CL_BANCO = CL_BANCO, CL_CTA_BANCO = CL_CTA_BANCO, CL_CLABE_BANCO = CL_CLABE_BANCO, CL_FECHA_BAJA = CL_FECHA_BAJA
    WHERE CL_NUMERO = CL_NUMERO;
END //

DELIMITER ;

-- Eliminar Clientes

DELIMITER //

CREATE PROCEDURE DeleteCliente(
    IN CL_NUMERO DOUBLE)
BEGIN
    -- Intentar eliminar el registro
    DELETE FROM clientes WHERE CL_NUMERO = CL_NUMERO;
END //

DELIMITER ;

-- Trigger Validar antes de eliminar cliente.
DELIMITER //

CREATE TRIGGER BeforeDeleteCliente
BEFORE DELETE ON clientes
FOR EACH ROW
BEGIN
    -- Validación de relaciones
    IF EXISTS (SELECT 1 FROM colono_lote WHERE CL_NUMERO = OLD.CL_NUMERO) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Error: No se puede eliminar porque está referenciado en la tabla colono_lote.';
    END IF;
END //

DELIMITER ;
