-- Insertar Cargos
DELIMITER //

CREATE PROCEDURE InsertCargo(
    IN CAR_FOLIO CHAR(10),
    IN ANT_DOCTO_CC_ID DOUBLE,
    IN L_MANZANA CHAR(3),
    IN L_NUMERO CHAR(6),
    IN CON_CLAVE SMALLINT,
    IN CAR_FECHA DATETIME,
    IN CAR_IMPORTE DOUBLE,
    IN CAR_IVA DOUBLE,
    IN CAR_DESCRIPCION CHAR(100),
    IN CL_NUMERO DOUBLE,
    IN CAR_POLIZA_PRO CHAR(8),
    IN ANT_CLIENTE_ID INT,
    IN ANT_CONC_CC_ID INT,
    IN CAR_FECHA_VENCE DATETIME,
    IN CAR_DESCUENTO DOUBLE,
    IN CAR_INICIO SMALLINT)
BEGIN
    -- Validación de la clave primaria: no debe ser vacía ni nula
    IF CAR_FOLIO IS NULL OR CAR_FOLIO = '' THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Error: CAR_FOLIO no puede estar vacío.';
    END IF;

    IF ANT_DOCTO_CC_ID IS NULL THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Error: ANT_DOCTO_CC_ID no puede estar vacío.';
    END IF;

    IF L_MANZANA IS NULL OR L_MANZANA = '' THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Error: L_MANZANA no puede estar vacía.';
    END IF;

    IF L_NUMERO IS NULL OR L_NUMERO = '' THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Error: L_NUMERO no puede estar vacío.';
    END IF;

    IF CAR_FECHA IS NULL THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Error: CAR_FECHA no puede estar vacía.';
    END IF;

    -- Inserción de los datos
    INSERT INTO cargos (CAR_FOLIO, ANT_DOCTO_CC_ID, L_MANZANA, L_NUMERO, CON_CLAVE, CAR_FECHA, CAR_IMPORTE, CAR_IVA, CAR_DESCRIPCION, CL_NUMERO, CAR_POLIZA_PRO, ANT_CLIENTE_ID, ANT_CONC_CC_ID, CAR_FECHA_VENCE, CAR_DESCUENTO, CAR_INICIO)
    VALUES (CAR_FOLIO, ANT_DOCTO_CC_ID, L_MANZANA, L_NUMERO, CON_CLAVE, CAR_FECHA, CAR_IMPORTE, CAR_IVA, CAR_DESCRIPCION, CL_NUMERO, CAR_POLIZA_PRO, ANT_CLIENTE_ID, ANT_CONC_CC_ID, CAR_FECHA_VENCE, CAR_DESCUENTO, CAR_INICIO);
END //

DELIMITER ;
-- Actualizar
DELIMITER //

CREATE PROCEDURE UpdateCargo(
    IN CAR_FOLIO CHAR(10),
    IN ANT_DOCTO_CC_ID DOUBLE,
    IN L_MANZANA CHAR(3),
    IN L_NUMERO CHAR(6),
    IN CON_CLAVE SMALLINT,
    IN CAR_FECHA DATETIME,
    IN CAR_IMPORTE DOUBLE,
    IN CAR_IVA DOUBLE,
    IN CAR_DESCRIPCION CHAR(100),
    IN CL_NUMERO DOUBLE,
    IN CAR_POLIZA_PRO CHAR(8),
    IN ANT_CLIENTE_ID INT,
    IN ANT_CONC_CC_ID INT,
    IN CAR_FECHA_VENCE DATETIME,
    IN CAR_DESCUENTO DOUBLE,
    IN CAR_INICIO SMALLINT)
BEGIN
    -- Validación de la clave primaria: no debe ser vacía ni nula
    IF CAR_FOLIO IS NULL OR CAR_FOLIO = '' THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Error: CAR_FOLIO no puede estar vacío.';
    END IF;

    IF ANT_DOCTO_CC_ID IS NULL THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Error: ANT_DOCTO_CC_ID no puede estar vacío.';
    END IF;

    -- Actualización de los datos
    UPDATE cargos
    SET L_MANZANA = L_MANZANA, L_NUMERO = L_NUMERO, CON_CLAVE = CON_CLAVE, CAR_FECHA = CAR_FECHA, CAR_IMPORTE = CAR_IMPORTE, CAR_IVA = CAR_IVA, CAR_DESCRIPCION = CAR_DESCRIPCION, CL_NUMERO = CL_NUMERO, CAR_POLIZA_PRO = CAR_POLIZA_PRO, ANT_CLIENTE_ID = ANT_CLIENTE_ID, ANT_CONC_CC_ID = ANT_CONC_CC_ID, CAR_FECHA_VENCE = CAR_FECHA_VENCE, CAR_DESCUENTO = CAR_DESCUENTO, CAR_INICIO = CAR_INICIO
    WHERE CAR_FOLIO = CAR_FOLIO AND ANT_DOCTO_CC_ID = ANT_DOCTO_CC_ID;
END //

DELIMITER ;
-- Eliminar
DELIMITER //

CREATE PROCEDURE DeleteCargo(
    IN CAR_FOLIO CHAR(10),
    IN ANT_DOCTO_CC_ID DOUBLE)
BEGIN
    -- Intentar eliminar el registro
    DELETE FROM cargos WHERE CAR_FOLIO = CAR_FOLIO AND ANT_DOCTO_CC_ID = ANT_DOCTO_CC_ID;
END //

DELIMITER ;
-- Validar Eliminar

DELIMITER //

CREATE TRIGGER BeforeDeleteCargo
BEFORE DELETE ON cargos
FOR EACH ROW
BEGIN
    -- Validación de relaciones
    IF EXISTS (SELECT 1 FROM colono_lote WHERE L_MANZANA = OLD.L_MANZANA AND L_NUMERO = OLD.L_NUMERO) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Error: No se puede eliminar porque está referenciado en la tabla colono_lote.';
    END IF;
END //

DELIMITER ;
