-- Insertar en lote
DELIMITER //

CREATE PROCEDURE InsertLote(
    IN L_MANZANA CHAR(3),
    IN L_NUMERO CHAR(6),
    IN CA_CLAVE1 CHAR(3),
    IN CA_CLAVE2 CHAR(3),
    IN CA_CLAVE0 CHAR(3),
    IN L_TOTAL_M2 DOUBLE,
    IN L_IMPORTE DOUBLE,
    IN L_NUM_EXT CHAR(6),
    IN L_PAHT_MAP CHAR(150),
    IN L_FECHA_MANT DATETIME,
    IN L_FECHA_POSIBLE DATETIME)
BEGIN
    -- Validación de la clave primaria: no debe ser vacía ni nula
    IF L_MANZANA IS NULL OR L_MANZANA = '' THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Error: L_MANZANA no puede estar vacía.';
    END IF;

    IF L_NUMERO IS NULL OR L_NUMERO = '' THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Error: L_NUMERO no puede estar vacío.';
    END IF;

    -- Inserción de los datos
    INSERT INTO lote (L_MANZANA, L_NUMERO, CA_CLAVE1, CA_CLAVE2, CA_CLAVE0, L_TOTAL_M2, L_IMPORTE, L_NUM_EXT, L_PAHT_MAP, L_FECHA_MANT, L_FECHA_POSIBLE)
    VALUES (L_MANZANA, L_NUMERO, CA_CLAVE1, CA_CLAVE2, CA_CLAVE0, L_TOTAL_M2, L_IMPORTE, L_NUM_EXT, L_PAHT_MAP, L_FECHA_MANT, L_FECHA_POSIBLE);
END //

DELIMITER ;

-- Actualizar Lote
DELIMITER //

CREATE PROCEDURE UpdateLote(
    IN L_MANZANA CHAR(3),
    IN L_NUMERO CHAR(6),
    IN CA_CLAVE1 CHAR(3),
    IN CA_CLAVE2 CHAR(3),
    IN CA_CLAVE0 CHAR(3),
    IN L_TOTAL_M2 DOUBLE,
    IN L_IMPORTE DOUBLE,
    IN L_NUM_EXT CHAR(6),
    IN L_PAHT_MAP CHAR(150),
    IN L_FECHA_MANT DATETIME,
    IN L_FECHA_POSIBLE DATETIME)
BEGIN
    -- Validación de la clave primaria: no debe ser vacía ni nula
    IF L_MANZANA IS NULL OR L_MANZANA = '' THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Error: L_MANZANA no puede estar vacía.';
    END IF;

    IF L_NUMERO IS NULL OR L_NUMERO = '' THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Error: L_NUMERO no puede estar vacío.';
    END IF;

    -- Actualización de los datos
    UPDATE lote
    SET CA_CLAVE1 = CA_CLAVE1, CA_CLAVE2 = CA_CLAVE2, CA_CLAVE0 = CA_CLAVE0, L_TOTAL_M2 = L_TOTAL_M2, L_IMPORTE = L_IMPORTE, L_NUM_EXT = L_NUM_EXT, L_PAHT_MAP = L_PAHT_MAP, L_FECHA_MANT = L_FECHA_MANT, L_FECHA_POSIBLE = L_FECHA_POSIBLE
    WHERE L_MANZANA = L_MANZANA AND L_NUMERO = L_NUMERO;
END //

DELIMITER ;

-- Eliminar en lote

DELIMITER //

CREATE PROCEDURE DeleteLote(
    IN L_MANZANA CHAR(3),
    IN L_NUMERO CHAR(6))
BEGIN
    -- Intentar eliminar el registro
    DELETE FROM lote WHERE L_MANZANA = L_MANZANA AND L_NUMERO = L_NUMERO;
END //

DELIMITER ;

-- Trigger para validar antes de eliminar.

DELIMITER //

CREATE TRIGGER BeforeDeleteLote
BEFORE DELETE ON lote
FOR EACH ROW
BEGIN
    -- Validación de relaciones
    IF EXISTS (SELECT 1 FROM colono_lote WHERE L_MANZANA = OLD.L_MANZANA AND L_NUMERO = OLD.L_NUMERO) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Error: No se puede eliminar porque está referenciado en la tabla colono_lote.';
    END IF;
END //

DELIMITER ;
